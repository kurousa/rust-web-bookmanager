[config]
# Rustワークスペース内に作成する各クレートごとの実行を無効化
default_to_workspace = false

# 全体共通の環境変数定義
[env]
HOST = "0.0.0.0"
PORT = 8080
DATABASE_USERNAME = "app"
DATABASE_PASSWORD = "passwd"
DATABASE_NAME = "app"
DATABASE_PORT_OUTER = 5432
DATABASE_PORT_INNER = 5432
REDIS_PORT_OUTER = 6379
REDIS_PORT_INNER = 6379
AUTH_TOKEN_TTL = 86400

# Docker Composeのネットワーク内でのDB等への接続情報
[tasks.set-env-docker.env]
DATABASE_HOST = "postgres"
DATABASE_PORT = "${DATABASE_PORT_INNER}"
DATABASE_URL = "postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}?user=${DATABASE_USERNAME}&password=${DATABASE_PASSWORD}"
REDIS_HOST = "redis"
REDIS_PORT = "${REDIS_PORT_INNER}"
JAEGER_HOST = "jaeger"
JAEGER_PORT = 6831
BACKEND_HOST = "backend"
BACKEND_PORT = 8080
FRONTEND_PORT = 3000

# Docker Compose外からDB等にアクセスする際の接続情報
[tasks.set-env-local.env]
DATABASE_HOST = "localhost"
DATABASE_PORT = "${DATABASE_PORT_OUTER}"
DATABASE_URL = "postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}?user=${DATABASE_USERNAME}&password=${DATABASE_PASSWORD}"
REDIS_HOST = "localhost"
REDIS_PORT = "${REDIS_PORT_OUTER}"
JAEGER_HOST = "localhost"
JAEGER_PORT = 6831
BACKEND_HOST = "localhost"
BACKEND_PORT = 8080
FRONTEND_PORT = 3000

# runの前に依存関係のあるサービスを起動
[tasks.before-build-ci]
run_task = [
    { name = [
        "compose-up-db",
        "migrate-on-ci",
        "compose-up-redis",
    ] },
]

[tasks.before-build]
run_task = [
    { name = [
        "compose-up-db",
        "migrate-on-ps",
        "compose-up-redis",
    ] },
]

# run-in-docker実行用のコンテナビルド
[tasks.compose-build-frontend]
extend = "set-env-local"
command = "docker"
args = [
  "compose", "build", "frontend",
  "--build-arg", "BUILDKIT_INLINE_CACHE=1", "${@}"
]

[tasks.compose-build-backend]
extend = "set-env-local"
command = "docker"
args = [
  "compose", "build", "backend",
  "--build-arg", "BUILDKIT_INLINE_CACHE=1", "${@}"
]

# Github Actions ECR build
[tasks.ecr-build]
extend = "set-env-local"
command = "docker"
args = [
  "build", "-t", "backend:latest",
  "--build-arg", "BUILDKIT_INLINE_CACHE=1",
  "."
]

# cargo make run用
# ローカル上でRustプログラムを実行
[tasks.run]
extend = "set-env-local"
dependencies = ["before-build"]
command = "cargo"
args = ["run", "${@}"]

# cargo make run-in-docker用
# Docker上でRustプログラムを実行
[tasks.backend-run-in-docker]
extend = "set-env-docker"
dependencies = ["before-build", "compose-build-backend"]
command = "docker"
args = ["compose", "up", "-d", "backend"]

[tasks.frontend-run-in-docker]
extend = "set-env-docker"
dependencies = ["before-build", "compose-build-frontend"]
command = "docker"
args = ["compose", "up", "-d", "frontend"]

### Development

# ワークスペース内のファイル保存時に自動で実行するタスクを定義
[tasks.watch]
extend = "set-env-local"
dependencies = ["before-build"]
run_task = [
    { name = ["check", "fmt", "clippy", "test", "run"] }
]
watch = true

# cargo check
[tasks.check]
extend = "set-env-local"
command = "cargo"
args = ["check"]

# cargo build(not release)
[tasks.build]
extend = "set-env-local"
dependencies = ["before-build"]
command = "cargo"
args = ["build", "${@}"]

# cargo fmtによるフォーマッティング
[tasks.fmt]
extend = "set-env-local"
command = "cargo"
args = ["fmt", "--all", "${@}"]

# clippyによる静的解析
[tasks.clippy]
extend = "set-env-local"
command = "cargo"
args = ["clippy", "--all", "--all-targets", "${@}"]

# ユニットテストの実施
[tasks.test]
extend = "set-env-local"
# cargo-nextestという、テストランナーを利用してテストを実施するため
# https://nexte.st/
install_crate = { crate_name = "cargo-nextest", binary = "cargo", test_arg = ["nextest", "--help"]}
command = "cargo"
args = [
  "nextest",
  "run",
  # ワークスペース内のすべてのクレートを対象
  "--workspace",
  # 全てのテスト結果を表示
  "--status-level",
  "all",
  # テストをシングルスレッドで実行
  "--test-threads=1",
  # 成功したテストの出力を抑制
  "--no-tests=pass"
]

# CIからのclippy呼び出し用
[tasks.clippy-ci]
extend = "set-env-local"
dependencies = ["before-build-ci"]
command = "cargo"
args = [
    "clippy",
    "--",
    # 依存関係(dependencies)のコードをチェック対象外にする
    "--no-deps",
    # 警告をエラーとして扱う
    "-Dwarnings"
]

# CIからのtest呼び出し用
[tasks.test-ci]
dependencies = ["before-build-ci"]
run_task = "test"

### Migration

# sqlx-cliをインストールし、マイグレーションを実行
[tasks.migrate-on-ci]
extend = "set-env-local"
install_crate = { crate_name = "sqlx-cli", binary = "sqlx", test_arg = "--help", version = "0.7.3" }
script = '''
#!/bin/bash
until sqlx migrate run --source adapter/migrations; do
    sleep 1
done
'''

[tasks.migrate-on-ps]
extend = "set-env-local"
install_crate = { crate_name = "sqlx-cli", binary = "sqlx", test_arg = "--help", version = "0.7.3" }
command = "powershell"
args = [
  "-ExecutionPolicy","Bypass",
  "./migrate.ps1"
]


[tasks.sqlx]
extend = "set-env-local"
install_crate = { crate_name = "sqlx-cli", binary = "sqlx", test_arg = "--help", version = "0.7.3" }
command = "sqlx"
args = ["${@}", "--source", "adapter/migrations"]

# psql実行用
[tasks.psql]
extend = "set-env-local"
command = "docker"
args = [
  "run",
  "-it",
  "--rm",
  "--network", "host",
  "-v", ".:/work",
  "postgres:15",
  "psql", "${DATABASE_URL}", "${@}"
]

# 初期データ投入クエリの実行
[tasks.initial-setup]
extend = "set-env-local"
command = "docker"
args = [
  "run",
  "-it",
  "--rm",
  "--network", "host",
  "-v", "${PWD}:/work",
  "postgres:15",
  "psql", "${DATABASE_URL}",
  "-f", "/work/data/initial_setup.sql"
]

### Docker Compose

# 任意のdocker composeコマンド実行
[tasks.compose]
extend = "set-env-docker"
command = "docker"
args = ["compose", "${@}"]

# docker compose ps表示用
[tasks.compose-ps]
extend = "set-env-docker"
command = "docker"
args = ["compose", "ps"]

# docker compose logs表示用
[tasks.compose-logs]
extend = "set-env-docker"
command = "docker"
args = ["compose", "logs", "${@}"]

[tasks.compose-up-db]
extend = "set-env-docker"
command = "docker"
args = ["compose", "up", "-d", "postgres"]

[tasks.compose-up-redis]
extend = "set-env-docker"
command = "docker"
args = ["compose", "up", "-d", "redis"]

[tasks.compose-down]
extend = "set-env-docker"
command = "docker"
args = ["compose", "down"]

# Docker Composeに関する全てを破棄
[tasks.compose-remove]
extend = "set-env-docker"
command = "docker"
args = ["compose", "down", "-v"]
