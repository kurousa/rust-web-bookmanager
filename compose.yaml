services:

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
      args:
        BACKEND_HOST: ${BACKEND_HOST}
        BACKEND_PORT: ${BACKEND_PORT}
      network: host
    ports:
      - ${FRONTEND_PORT}:3000

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DATABASE_URL: ${DATABASE_URL}
      network: host
    ports:
      - 8080:${PORT}
    environment:
      HOST: ${HOST}
      PORT: ${PORT}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      AUTH_TOKEN_TTL: ${AUTH_TOKEN_TTL}
      JAEGER_HOST: ${JAEGER_HOST}
      JAEGER_PORT: ${JAEGER_PORT}
    depends_on:
      - redis
      - postgres
      - jaeger

  redis:
    image: redis:alpine
    ports:
      - ${REDIS_PORT_OUTER}:${REDIS_PORT_INNER}

  postgres:
    image: postgres:15
    # log_destination=stderr ログを標準エラー出力に集約し、
    # log_statement=all 実行される全てのSQLステートメントをログに記録する
    # log_connections=on log_disconnections=on データベースへの全ての接続と切断も記録する
    command: >
      postgres
      -c log_destination=stderr
      -c log_statement=all
      -c log_connections=on
      -c log_disconnections=on
    ports:
      - 5432:5432
    volumes:
      - db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DATABASE_USERNAME}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  jaeger:
    image: jaegertracing/all-in-one:${JAEGER_VERSION:-latest}
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Jaeger collector
      - "6831:6831/udp" # Jaeger agent (UDP)
      - "6832:6832/udp" # Jaeger agent (UDP)
    environment:
      - LOG_LEVEL=${JAEGER_LOG_LEVEL:-debug}

volumes:
  db:
    driver: local